from dataclasses import dataclass

from pyapi_rts.api import Draft
from pyapi_rts.api import Subsystem as RTDSSubsystem
from pyapi_rts.api.component import Component as RTDSComponent
from pyapi_rts.api.lark.rlc_tline import RLCTLine

from epowcore.gdf.bus import Bus
from epowcore.gdf.component import Component
from epowcore.gdf.core_model import CoreModel
from epowcore.gdf.exciters.exciter import Exciter
from epowcore.gdf.generators.generator import Generator
from epowcore.gdf.governors.governor import Governor
from epowcore.gdf.load import Load
from epowcore.gdf.power_system_stabilizers.power_system_stabilizer import PowerSystemStabilizer
from epowcore.gdf.tline import TLine
from epowcore.gdf.transformers.transformer import Transformer
from epowcore.generic.manipulation.insert_buses import insert_buses
from epowcore.rscad.components.dummy import Dummy

from .graph_transformer_rscad import GraphTransformerRscad
from .rscad_canvas_drawer import RscadCanvasDrawer
from .rscad_component_creator import RscadComponentCreator, TLineElements


@dataclass
class RscadModel:
    draft: Draft
    tli_files: list[RLCTLine]

    def write_file(self, path: str, file_name: str) -> None:
        """Write the created RSCAD system to a draft file and TLI files."""
        self.draft.write_file(path + "/" + file_name)
        if not all(tli_file.write_file(path) for tli_file in self.tli_files):
            raise ValueError("Failed to write tli file.")


class RscadExporter:
    """This class uses the graph of the generic core model to generate appropriate RSCAD
    elements with the help of an API."""

    def __init__(self, core_model: CoreModel):
        insert_buses(
            core_model, (Exciter, Governor, PowerSystemStabilizer)
        )  # Ignore components that should not be connected to a bus
        self.core_model = core_model
        self.graph = self.core_model.graph
        self.transform_dict: dict[Component, str] = {}
        """Dictionary saving which Element of the Generic core model was transformed to which RSCAD element"""
        # Initializes an RSCAD system to generate elements into
        self.draft = Draft()
        self.subsystem = RTDSSubsystem(self.draft, 0)
        self.subsystem.tab_name = "Subsystem_0"
        self.draft.add_subsystem(self.subsystem)
        # Initializes .tli file for transmission line data
        self.tli_file_container: list[RLCTLine] = []
        self.creator = RscadComponentCreator(self.graph, self.core_model.base_frequency)

    def export(self) -> RscadModel:
        self._create_all_components()
        self._draw_graph()
        return RscadModel(self.draft, self.tli_file_container)

    def _create_all_components(self) -> None:
        """Creates all Components which can be directly generated by the elements in generic core model"""
        # Create and add all bus components
        for bus in self.core_model.type_list(Bus):
            rs_bus = self.creator.create_rscad_bus(bus)
            self.transform_dict[bus] = rs_bus.uuid
            self.subsystem.add_component(rs_bus)
        # Create and add all load components
        for load in self.core_model.type_list(Load):
            rs_dyload = self.creator.create_rscad_dyload(load)
            self.transform_dict[load] = rs_dyload.uuid
            self.subsystem.add_component(rs_dyload)
        # Create and add all TLine and TLine components
        for tline in self.core_model.type_list(TLine):
            # Create a TLine file for the RLC values and add it to the file container
            self.tli_file_container.append(self.creator.create_tli_file(tline))
            # Create hierarchy box of necessary Tline elements
            self._place_tli_in_graph(tline, self.creator.create_rscad_tline(tline))
        # Create and add all transformer components
        for transformer in self.core_model.type_list(Transformer):
            rs_transformer = self.creator.create_rscad_transformer(transformer)
            if rs_transformer is None:
                raise ValueError(f"Failed to create transformer component for {transformer.name}")
            self.transform_dict[transformer] = rs_transformer.uuid
            self.subsystem.add_component(rs_transformer)
        # Create and add all generator components
        for generator in self.core_model.type_list(Generator):
            rs_generator = self.creator.create_rscad_generator(generator)
            if rs_generator is None:
                raise ValueError(f"Failed to create generator component for {generator.name}")
            self.transform_dict[generator] = rs_generator.uuid
            self.subsystem.add_component(rs_generator)
        # Create and add exciter components
        for exciter in self.core_model.type_list(Exciter):
            rs_exciter = self.creator.create_rscad_exciter(exciter)
            if rs_exciter is None:
                raise ValueError(f"Failed to create exciter component for {exciter.name}")
            self.transform_dict[exciter] = rs_exciter.uuid
            self.subsystem.add_component(rs_exciter)
        # Create and add governor components
        for governor in self.core_model.type_list(Governor):
            rs_governor = self.creator.create_rscad_governor(governor)
            if rs_governor is None:
                raise ValueError(f"Failed to create governor component for {governor.name}")
            self.transform_dict[governor] = rs_governor.uuid
            self.subsystem.add_component(rs_governor)
        # Create and add PSS components
        for pss in self.core_model.type_list(PowerSystemStabilizer):
            rs_pss = self.creator.create_rscad_pss(pss)
            if rs_pss is None:
                raise ValueError(f"Failed to create PSS component for {pss.name}")
            self.transform_dict[pss] = rs_pss.uuid
            self.subsystem.add_component(rs_pss)

    def _place_tli_in_graph(self, tline: TLine, rscad_line_elements: TLineElements) -> None:
        """Adds the three tLine components to the graph and removes the equivalent tline component
        of the generic core model"""
        bus_connections = list(self.graph.neighbors(tline))
        self.graph.remove_node(tline)
        dummy_rec = Dummy(
            self.core_model.get_valid_id(),
            f"{tline.name}-REC",
            rscad_uuid=rscad_line_elements[0].uuid,
        )
        self.graph.add_node(dummy_rec)
        dummy_send = Dummy(
            self.core_model.get_valid_id(),
            f"{tline.name}-SEND",
            rscad_uuid=rscad_line_elements[1].uuid,
        )
        self.graph.add_node(dummy_send)
        self.transform_dict[dummy_rec] = rscad_line_elements[0].uuid
        self.transform_dict[dummy_send] = rscad_line_elements[1].uuid
        # Add edges from the tLine ends to the appropriate buses
        self.graph.add_edge(dummy_rec, bus_connections[0])
        self.graph.add_edge(dummy_send, bus_connections[1])
        # [0] is receivingLineEnd, [1] is sendingLineEnd, [2] is calculationBox
        self.subsystem.add_component(rscad_line_elements[0])
        self.subsystem.add_component(rscad_line_elements[1])
        self.subsystem.add_component(rscad_line_elements[2])

    def _draw_graph(self) -> None:
        """Relabel the the core model graph with the created RSCAD components
        and draw the graph."""
        rscad_graph_manager = GraphTransformerRscad()
        # Relabel the nodes of the elements of the generic core model with the uuids of the Rscad API components
        relabeled_graph = rscad_graph_manager.relabel_nodes(self.graph, self.transform_dict)
        drawer = RscadCanvasDrawer(
            relabeled_graph, self.draft, rscad_graph_manager, self.tli_file_container
        )
        drawer.draw_elements_on_canvas()
